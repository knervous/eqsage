name: Build and Release Electron App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  check_version:
    name: Check Package Version and Tag if Needed
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get package.json version
        id: get_version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "Package version is $version"
          echo "::set-output name=version::$version"

      - name: Compare versions and create new tag if needed
        env:
          PACKAGE_VERSION: ${{ steps.get_version.outputs.version }}
          CURRENT_REF: ${{ github.ref_name }}
        run: |
          if [[ "$CURRENT_REF" == v* ]]; then
            current=${CURRENT_REF:1}
          else
            current=""
          fi
          echo "Current tag version (if any): $current"
          if [ "$PACKAGE_VERSION" != "$current" ]; then
            echo "Package version ($PACKAGE_VERSION) differs from current tag ($current). Creating new tag."
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "v$PACKAGE_VERSION"
            # Push using token authentication:
            git push "https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git" "v$PACKAGE_VERSION"
          else
            echo "Package version matches the current tag. No new tag created."
          fi

  build:
    name: Build on ${{ matrix.os }}
    needs: check_version
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      # Use the package version from the previous job (without the v prefix)
      VERSION: ${{ needs.check_version.outputs.package_version }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci --no-audit
        env:
          CI: true

      - name: Build Electron App for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "Building for macOS (arm64)..."
          npm run build:electron:mac

      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Building for Windows (x64)..."
          npm run build:electron:win

      - name: Build Electron App for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Building for Linux (x64)..."
          npm run build:electron:linux

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ env.VERSION }}
          path: |
            dist/**/*${{ env.VERSION }}*.dmg
            dist/**/*${{ env.VERSION }}*.zip
            dist/**/*${{ env.VERSION }}*.exe
            dist/**/*${{ env.VERSION }}*.AppImage
            dist/**/*${{ env.VERSION }}*.deb
            dist/**/*${{ env.VERSION }}*.rpm

  release:
    name: Create Release and Upload Artifacts
    needs: build
    runs-on: ubuntu-latest
    env:
      # Again, use the package version from package.json (no v prefix)
      VERSION: ${{ needs.check_version.outputs.package_version }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts

      - name: Create Automatic Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GH_TOKEN }}"
          # The release is based on the tag with the v prefix, so prepend it here
          automatic_release_tag: "v${{ env.VERSION }}"
          prerelease: false
          title: "${{ env.VERSION }}"
          files: |
            build-artifacts/**
